# It is generated by configure.py.

ninja_required_version = 1.3

configure_args = 

root = .
builddir = build

cross_gcc_prefix = 
cc = gcc
ar = ar

cflags = 
ldflags = 

kernel_cc = ${cross_gcc_prefix}$cc
kernel_ld = ${cross_gcc_prefix}ld
kernel_objcopy = ${cross_gcc_prefix}objcopy
kernel_objdump = ${cross_gcc_prefix}objdump

kernel_cflags = -m32 -ffreestanding -Wall -Wextra -I./include
kernel_ldflags = -melf_i386

rule kernel_cc
  command = $kernel_cc -MMD -MT $out -MF $out.d $cflags $kernel_cflags -c $
      $in -o $out
  description = KERNEL_CC $out
  depfile = $out.d
  deps = gcc

rule kernel_ar
  command = rm -f $out && $kernel_ar crs $out $in
  description = KERNEL_AR $out

rule kernel_link
  command = $kernel_ld $ldflags $kernel_ldflags -o $out $in $libs
  description = KERNEL_LINK $out

build $builddir/boot/boot.o: kernel_cc boot/boot.S
build $builddir/boot/main.o: kernel_cc boot/main.c
  kernel_cflags = $kernel_cflags -Os
build $builddir/boot/boot.out: kernel_link $builddir/boot/boot.o $
    $builddir/boot/main.o
  kernel_ldflags = $kernel_ldflags -N -e start -Ttext 0x7C00
rule r_boot
  command = $kernel_objcopy -S -O binary -j .text $in $out
build $builddir/boot/boot: r_boot $builddir/boot/boot.out

build $builddir/kernel/kmain.o: kernel_cc $root/kernel/kmain.c
build $builddir/kernel/kernel: kernel_link $builddir/kernel/kmain.o
  kernel_ldflags = $kernel_ldflags -T $root/kernel/kernel.ld -nostdlib

rule r_nos_img
  command = fasm $in
  description = BUILD_IMG $out
build nos.img: r_nos_img nos.asm | $builddir/boot/boot $builddir/kernel/kernel

default nos.img

build all: phony $builddir/boot/boot $builddir/kernel/kernel nos.img
